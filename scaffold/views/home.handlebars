{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form">
            <!-- make a header here -->
            <h2>Join the Conversation</h2>
            <form class='post-form' action="/posts" method="POST">
                <!-- title input field name = "title" -->
                <textarea class="post-title" type="text" name="title" placeholder="Title"></textarea>
                <!-- text area input field name = "content" -->
                <textarea id="post-content" type="text" name="content" placeholder="Body"></textarea>
                <div class="form-actions">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">üòÄ</button>
                    <button type="submit" class="post-button">Post</button>
                </div>
            </form>

            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <input id='emoji-search' oninput="searchEmojis()">
                <div id='emoji-grid'>

                </div>
                <!-- input field for the emoji search, use oninput="searchEmojis() -->
                <!-- a div, id = "emoji-grid" -->
            </div>
        </section>
    {{/if}}

    <section class="posts-list">
        <!-- recent posts -->

        {{#if posts.length}}
        <h2 class="posts-title">Posts</h2>
        <div class="post-sorting">
            {{#if loggedIn}}
                <h3>Show: </h3>
                <button type="button" class="post-button" onclick=showPosts('all')>All</button>
                <button type="button" class="post-button" onclick=showPosts('Following')>Following</button>
            {{/if}}
            <h3 class="left-margin">Sort By: </h3>
            <button type="button" class="post-button" onclick=sortPosts('timestamp')>Date</button>
            <button type="button" class="post-button" onclick=sortPosts('likes')>Likes</button>        
        </div>
            

        </div>
        <ul id="posts-parent">
            {{#each posts}}
                <!-- you have to pass the user in to posts and this is the syntax -->  
                <div id="post-container">
                {{> post this user=../user loggedIn=../loggedIn}}
                {{#if ../comments.length}}
                    <ul id="replies">
                        {{#each ../comments}}
                            {{#ifCond postid ../id}}
                            <div class="reply">
                                <div class="reply-avatar-parent">
                                    <!-- the user's avatar -->
                                    <img src={{avatar_url}} alt="Profile Image" title="Avatar" class="reply-avatar">
                                </div>
                                <div class="reply-content preserve-newlines">
                                    <!-- the post -->
                                    <p class="comment-text">{{content}}</p>
                                    <div class="reply-status-bar">
                                        {{#ifCond username ../../user.username}}
                                            <p  class='hover' onclick="handleCommentDeleteClick('{{timestamp}}', this)">üóëÔ∏è {{likes}}</p>
                                        {{else}}
                                            <p class = ' hover not-liked likes' onclick="handleCommentLikeClick('{{timestamp}}', this)">ü§ç {{likes}}</p>
                                        {{/ifCond}}
                                        <p>{{username}}</p>
                                        <p>{{timestamp}}</p>
                                    </div>        
                                </div>
                            </div>
                            {{else}}
                            {{/ifCond}}        
                        {{/each}}                
                    </ul>
                    {{else}}
                        <!-- no replies -->
                    {{/if}}
                {{#if ../loggedIn}}
                    <form class='post-form' action="/comments" method="POST">
                        <!-- title input field name = "title" -->
                        <!-- text area input field name = "content" -->
                        <input type='hidden' name='postid' value={{id}} />
                        <textarea id="comment-textarea" type="text" name="content" placeholder="Comment"></textarea>
                        <div class="form-actions">
                            <button type="submit" class="post-button">Post</button>
                        </div>
                    </form>
                {{/if}}
            </div>                    
            {{/each}}
        </ul>
        {{else}}
            <!-- no posts, oh no, what now? -->
        {{/if}}
    </section>
</section>


{{! JavaScript for Emoji Integration }}
<script>

/*
 You want to show a subset of the emojis. About 200. However,
 you also want the user to be able to search all emojis,
 so, put them in this array when the array is empty so 
 that you have them.
*/

let allEmojis = [];  // Global list to hold all emojis

function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';


    if(container.style.display === 'block' && allEmojis.length == 0){
        // go "Fetch" you some emojis and show them off with displayEmojies
        let url = 'https://emoji-api.com/emojis?access_key=81666a4b2fa2ebf6e78c06a5c6945a13d0391438';
        fetch(url)
        .then(res => res.json())
        .then(data => allEmojis = data)
        .catch(error => console.error("Error", error));
    }
}

function displayEmojis(emojis,limit=200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    // array.filter takes a predicate
    // use string.includes. 
    const filteredEmojis = allEmojis.filter(e => e.slug.includes(searchTerm));
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    // put an emoji on a form somehow. 
    textarea = document.getElementById('post-content')
    textarea.value += emoji;
    // do this when you're doing getting the emoji on the form
    //
    textarea.focus();  // Keep focus on the textarea

}

window.onload = function() {
    fetch('/following')
    .then(statusCheck)
    .then(processData)
    .catch(handleError);

    function statusCheck(res) {
        if (!res.ok) {
            throw new Error('Failed to fetch: ' + res.statusText);
        }
        return res.json();  // Assuming the server response is in JSON format
    }

    //`````````````````````````````````````````````````````````````````````````````
    function processData(data) {
        if (data.following) {
            let allPosts = document.querySelectorAll(".post");
            allPosts.forEach(e => {
            let username = e.querySelector('.username').innerHTML;
            if (data.following.includes(username)) {
                let post = document.getElementById(e.id);
                let postBtn = post.querySelector('.follow-button');
                postBtn.textContent = 'Unfollow';
                postBtn.classList.add('unfollow');
                postBtn.classList.remove('follow');
            }
            });
            } else {
                console.log("Something went wrong!");
            }
        }

        function handleError(error) {
            console.error('Error updating likes', error);
        }
}

function showPosts(field) {
    if (field == 'all') {
        let allPosts = document.querySelectorAll('.hide');
        allPosts.forEach(e => {
            e.classList.remove('hide')
        });
    } else {
        let allPosts = document.querySelectorAll('.post');
        allPosts.forEach(e => {
            if (e.querySelector('.unfollow')) {
            } else {
                e.parentElement.classList.add('hide');
            }
        });
    }
}

function sortPosts(field) {
    fetch('/sort', {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({sortBy: field})
            })
        .then(statusCheck)
        .then(processData)
        .catch(handleError);

        function statusCheck(res) {
            if (!res.ok) {
                throw new Error('Failed to fetch: ' + res.statusText);
            }
            return res.json();  // Assuming the server response is in JSON format
    }

    //`````````````````````````````````````````````````````````````````````````````
        function processData(data) {
            if (data.posts) {
                let allPosts = document.getElementById("posts-parent");
                data.posts.forEach(e => {
                    let post = document.getElementById(e.id).parentElement;
                    allPosts.appendChild(post);
                });
            } else {
                console.log("Something went wrong!");
            }
        }

        function handleError(error) {
            console.error('Error sorting', error);
        }
    }


    function handleCommentLikeClick(timestamp, e) {
        let likesEle = e;
        let postbody = JSON.stringify({timestamp: timestamp, change: 'increment'})
        if (likesEle.classList.contains('liked')) {
            postbody = JSON.stringify({timestamp: timestamp, change: 'decrement'})
        }

        fetch('/likecomment', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: postbody
            })
        .then(statusCheck)
        .then(processData)
        .catch(handleError);

        function statusCheck(res) {
            if (!res.ok) {
                throw new Error('Failed to fetch: ' + res.statusText);
            }
            return res.json();  // Assuming the server response is in JSON format
    }

    //`````````````````````````````````````````````````````````````````````````````
        function processData(data) {
            if (data.change) {
                if (data.change == 'increment') {
                    likesEle.textContent = '‚ù§Ô∏è ' + data.likes;
                    likesEle.classList.remove('not-liked');
                    likesEle.classList.add('liked');
                } else {
                    likesEle.textContent = 'ü§ç ' + data.likes;
                    likesEle.classList.remove('liked');
                    likesEle.classList.add('not-liked');                    
                }
                
            } else {
                console.log("Something went wrong!");
            }
        }

        function handleError(error) {
            console.error('Error updating likes', error);
        }
    }




    function handleCommentDeleteClick(timestamp, e) {
        let deleteEle = e;
        e.parentElement.parentElement.parentElement.remove();
        let postbody = JSON.stringify({timestamp: timestamp})
        fetch('/deletecomment', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: postbody
            })
        .then(statusCheck)
        .then(processData)
        .catch(handleError);
        // you might want to "fetch" something...        
        function statusCheck(res) {
            if (!res.ok) {
                throw new Error('Failed to fetch: ' + res.statusText);
            }
            return res.json();  // Assuming the server response is in JSON format
        }
        function processData(data) {
            if (data.timestamp) {
            } else {
                console.log("Something went wrong!");
            }
        }

        function handleError(error) {
            console.error('Error removing post', error);
        }    
    }
</script>

